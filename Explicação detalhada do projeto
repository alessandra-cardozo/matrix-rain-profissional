# 💻 O que é o projeto “Matrix Rain Profissional”

Imagine o famoso filme *Matrix*, com aquelas **letras verdes caindo como chuva**. 🌧️
O nosso projeto faz **exatamente isso**, mas você pode interagir: mudar a cor, o tamanho, a velocidade, a densidade, ativar o modo arco-íris, e até escolher paletas de cores diferentes. É um **jogo de programação visual**, ótimo para estudo. 📚✨

Basicamente, ele é feito com **HTML, CSS e JavaScript**.

---

# 🧩 Estrutura do projeto

O código está dividido em **três partes principais**:

### 1️⃣ HTML – Estrutura da página

O HTML é **a coluna vertebral** do site, ele diz o que existe na página.

No nosso projeto temos:

```html
<canvas id="matrix"></canvas>
```

* O `<canvas>` é onde a magia acontece. É como uma tela em branco onde o JavaScript vai desenhar as letras caindo.

```html
<button class="toggle-btn">⚙️</button>
<div class="config-panel" id="configPanel"> ... </div>
```

* O botão ⚙️ abre ou fecha o **painel de configurações**.
* O painel tem **inputs** para você escolher a cor, tamanho da fonte, velocidade, densidade e modo arco-íris.

---

### 2️⃣ CSS – Aparência

O CSS é como a **roupa da página**, ele deixa tudo bonito e organizado.

Alguns detalhes importantes:

```css
body {
  background:black;
  overflow:hidden;
}
canvas {
  display:block;
}
.config-panel {
  position: fixed; /* Sempre aparece na tela, mesmo quando você rola */
  background: rgba(0,0,0,0.85);
  border-radius:12px;
}
```

* `background:black` deixa a tela preta, igual ao filme.
* `overflow:hidden` evita barras de rolagem.
* `.config-panel` é o menu flutuante que podemos abrir e fechar.

---

### 3️⃣ JavaScript – A mágica que faz as letras caírem

O JavaScript é o **cérebro do projeto**. Ele faz a animação funcionar, captura os cliques e muda cores.

Vamos quebrar em partes:

---

#### a) Pegando o canvas e definindo contexto

```javascript
const c = document.getElementById("matrix");
const ctx = c.getContext("2d");
```

* `c` é o canvas, a nossa tela.
* `ctx` é o “pincel” que vamos usar para desenhar as letras.

---

#### b) Configurações iniciais

```javascript
let fontSize = 18; // tamanho da letra
let rainColor = "#0F0"; // cor verde inicial
let letters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%&*".split("");
let rainbow = false; // arco-íris desligado
let rainbowHue = 0; // para mudar a cor quando arco-íris está ligado
let speed = 4; // velocidade da chuva
let density = 3; // densidade das gotas
let palette = "hsl"; // paleta de cores
```

* Aqui definimos **tudo que podemos alterar**: tamanho, cor, letras, arco-íris, velocidade e densidade.

---

#### c) Preparando a tela e as gotas

```javascript
function resizeCanvas() {
  c.width = window.innerWidth;
  c.height = window.innerHeight;
  columns = Math.floor(c.width / fontSize);
  drops = new Array(columns * density).fill(1);
}
```

* Fazemos a tela **ocupar toda a janela do navegador**.
* Criamos `drops`, que são as **colunas de letras** que vão cair. Cada “drop” começa no topo da tela.

---

#### d) Escolhendo a cor do arco-íris

```javascript
function getRainbowColor() {
  rainbowHue += 1;
  switch(palette){
    case "warm":
      return `hsl(${(rainbowHue*2)%60+0}, 100%, 50%)`;
    case "cool":
      return `hsl(${180 + rainbowHue%180}, 80%, 60%)`;
    case "neon":
      const neonColors = ["#00ff00","#ff00ff","#00ffff"];
      return neonColors[Math.floor((rainbowHue/5)%neonColors.length)];
    default:
      return `hsl(${rainbowHue % 360}, 100%, 50%)`;
  }
}
```

* Se o arco-íris está ligado, **as letras mudam de cor automaticamente**.
* Dependendo da **paleta** que você escolher, as cores mudam (quente, frio, neon).

---

#### e) Desenhando a chuva

```javascript
function draw() {
  ctx.fillStyle = "rgba(0,0,0,0.05)";
  ctx.fillRect(0,0,c.width,c.height);

  ctx.fillStyle = rainbow ? getRainbowColor() : rainColor;
  ctx.font = `${fontSize}px monospace`;
  
  for(let i=0;i<drops.length;i++){
    const text = letters[Math.floor(Math.random()*letters.length)];
    ctx.fillText(text, i*fontSize, drops[i]*fontSize);
    if(drops[i]*fontSize > c.height && Math.random()>0.95) drops[i]=0;
    drops[i] += speed;
  }
  requestAnimationFrame(draw);
}
```

* Primeiro, **preenchemos a tela com preto semi-transparente**, para dar aquele efeito de rastro.
* Depois, **escrevemos cada letra na tela** na posição da sua coluna.
* Quando a letra chega no final, **resetamos para o topo**.
* `requestAnimationFrame(draw)` faz tudo **animar quadro a quadro**, tipo um vídeo.

---

#### f) Interatividade do painel

```javascript
colorPicker.addEventListener("input", e=>rainColor=e.target.value);
fontSizeRange.addEventListener("input", e=>{fontSize=parseInt(e.target.value); resizeCanvas();});
speedRange.addEventListener("input", e=>speed=parseInt(e.target.value));
densityRange.addEventListener("input", e=>{density=parseInt(e.target.value); resizeCanvas();});
rainbowMode.addEventListener("change", e=>rainbow=e.target.checked);
paletteSelect.addEventListener("change", e=>palette=e.target.value);
```

* Cada controle do painel altera **uma parte da chuva em tempo real**: cor, tamanho, velocidade, densidade, arco-íris e paleta.

---

#### g) Mais interatividade

```javascript
window.addEventListener("click", ()=>{drops.push(1,1,1);});
toggleBtn.addEventListener("click", ()=>{configPanel.classList.toggle("hidden");});
```

* **Clique na tela**: adiciona mais gotas.
* **Botão ⚙️**: abre e fecha o painel.

---

# 🌟 O que você aprende com este projeto

* Trabalhar com **Canvas** (`<canvas>`) no navegador.
* Criar **animações quadro a quadro** (`requestAnimationFrame`).
* Usar **eventos do JavaScript** (cliques, inputs, checkboxes, selects).
* Controlar **cores dinamicamente**, incluindo arco-íris.
* Fazer **painéis interativos** e responsivos.
* Lógica de programação: loops, arrays, funções, condicionais.

---

# 🎯 Por que é ótimo para iniciantes/adolescentes

* É visual e divertido 💚
* Você vê **o efeito imediatamente no navegador**
* Dá para **brincar com cores e velocidade**
* Aprende conceitos importantes de forma prática e lúdica

